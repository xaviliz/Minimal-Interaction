x = csv.data <- read.csv("new.csv")
x$AvatarA
x$TimeA
x$Time
plot(x=x$Time, y = x$AvatarA)
lines(x = x$Time,y2 = x$AvatarB,col="green")
lines(x = x$Time,x$AvatarB,col="green")
lines(x$AvatarB,col="green")
lines(x = x$Time,y=x$AvatarB,col="green")
points(x = x$Time,y=x$AvatarB,col="green")
plot(x=x$Time, y = x$AvatarA)
points(x = x$Time,y=x$AvatarB,col="green")
head(x)
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.
width
statB_pos
length()
length(x$Time)
1:10
ones(10)
ones(1:10)
1:1
rep(10)
rep(1,10)
statA = stat_posA*rep(1,length(x$Time))
statA = statA_pos*rep(1,length(x$Time))
statB = statB_pos*rep(1,length(x$Time))
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")
head(x)
x$nCrosses
seq(1, 100, by=2)
foo = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo[i] = foo[i]-foo[i+1]#
}
foo
foo = seq(1,length(x$Time))
foo
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}
foo
foo.diff
diff(x$nCrosses,1)
dnCrosses=diff(x, 1)
dnCrosses=diff(x$nCrosses, 1)
dnCrosses~=0
dnCrosses!=0
x$Time[1474]
x$Time[dnCrosses!=0]
x$Time == x$Time[dnCrosses!=0]
head(x$Time)
x$Time[dnCrosses!=0]/0.04
pos_Cros=x$Time[dnCrosses!=0]/0.04
x$AvatarA[pos_Cros]
ind_Cros=x$Time[dnCrosses!=0]/0.04
ind_Cros=x$Time[dnCrosses!=0]/0.04#
pos_Cros = = x$AvatarA[ind_Cros]#
points(x = ind_Cros,y=pos_Cros,col="red")
ind_Cros = x$Time[dnCrosses!=0]/0.04#
pos_Cros = x$AvatarA[ind_Cros]#
points(x = ind_Cros,y=pos_Cros,col="red")
length(pos_Cros)
length(ind_Cros)
pos_Cros
ind_Cros
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")
head(x)
x$clickA
x$clickB
ind_clA = x$Time[x$clickA!=0]/0.04
ind_clA
ind_clB = x$Time[x$clickB!=0]/0.04
ind_clB
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],4,col="red")
help points
help(points)
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex=4,col="red")
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4 cex=4,col="red")
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4, cex=4,col="red")
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4, cex=4,col="green")
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarA[ind_clB],pch=4, col="black")
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarA[ind_clB],pch=4, col="yell")
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarA[ind_clB],pch=4, col="yellow")
legend()
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA, col="black")#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarA[ind_clB], cex= 3, pch=4, col="black")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA, col="black")#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="black")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA, col="black")#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)), ylim =c(0,1440),    # ranges for axes#
col="black",                                    # color#
main="title",                                   # figure title#
xlab="x-axis", ylab="y-axis")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
x$time[end]
x$time[-1]
x$Time[-1]
x$Time[end]
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,1440),    # ranges for axes#
col="black",                                    # color#
main="title",                                   # figure title#
xlab="x-axis", ylab="y-axis")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,1440),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,2440),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,1380, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,2440),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,2440),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(0,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(50,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(100,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(0,length(x$Time)*0.04), ylim =c(80,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(85,length(x$Time)*0.04), ylim =c(85,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(85*0.04,length(x$Time)*0.04), ylim =c(85,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(80*0.04,length(x$Time)*0.04), ylim =c(85,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(80*0.04,length(x$Time)*0.04), ylim =c(87,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Legend#
#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,2,3,4), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,8,5,6,7), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,8,5,6,NA), # gives the legend appropriate symbols (lines)#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
pch = c(1,1,1,1,3,3,3),#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
pch = c(1,1,1,1,3,3,3),#
#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")) # gives the legend lines the correct color and width
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow")), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,3,3,3)
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
lwd=c(2.5,2.5),col=c("black","green", "blue", "blue", "red","green", "yellow"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,3,3,3))
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd=c(2.5,2.5),#
col=c("black","green", "blue", "blue", "red","green", "yellow"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,3,3,3))
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="yellow")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd=c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","green", "yellow"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,3,3)) # different shapes
palete()
palette()
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 3, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 3, pch=4, col="magenta")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd=c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","green", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,3,3)) # different shapes
help(points)
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x=x$Time, y=x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim =c(89,2340),    # ranges for axes#
col="black",                                    # color#
main="Experiment Results",                                   # figure title#
xlab="Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time,y=x$AvatarB,col="green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA],y=x$AvatarA[ind_clA],cex = 5, pch=4,col="green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB],y=x$AvatarB[ind_clB], cex= 6, pch=4, col="magenta")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty=c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd=c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","green", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,5,6)) # different shapes
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),    # ranges for axes#
col = "black",                                    # color#
main = "Experiment Results",                                   # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 5, col = "green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 6, col = "magenta")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","green", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,5,6)) # different shapes
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),    # ranges for axes#
col = "black",                                    # color#
main = "Experiment Results",                                   # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "green")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","green", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Script to compute statistics from data extracted from the experiment for AID#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
#Show the data in the first column#
x$AvatarA#
x$Time#
#
# plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),    # ranges for axes#
col = "black",                                    # color#
main = "Experiment Results",                                   # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                   # labeling axes#
#
# plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# width variable#
width = 1440.#
#
# staticA position#
statA_pos = width/4.#
#
# staticB position#
statB_pos = 3.*width/4.#
#
# length of data vectors#
length(x$Time)#
#
# stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
#
foo.diff = NULL#
#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04        # 0.04 is the time interval between frames#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
#
#Show the data in the first column#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
line(x= , y = , col = "red")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
line(x = x$Time, y = statA, col = "red")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
help(line)
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
lines(x = x$Time, y = statA, col = "red")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2340),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
lines(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2400, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(89,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
lines(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
lines(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "crosses", "clickA","clickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 1, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 1, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
lines(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
help(legend)
help(pch)
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
points(x = x$Time,y=statA,col="blue")#
points(x = x$Time,y=statB,col="blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
lines(x = x$Time, y = rlimit, col = "red")#
lines(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
points(x = x$Time, y = statB, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, col = "red")#
points(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18),#
cex = c(1,1,1,1,1,1,1)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
points(x = x$Time, y = statB, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, col = "red")#
points(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros],col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, col = "red")#
points(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], cex = 0.5, col="red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, col = "red")#
points(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], cex = 0.5, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, col = "red")#
points(x = x$Time, y = llimit, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], cex = 0.5, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "cyan")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], cex = 0.5, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.5, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black","green", "blue", "blue", "red","cyan", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.5, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of searcg space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.5, col = "red")#
points(x = x$Time, y = llimit, cex = 0.5, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,length(x$Time)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.5, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.5, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA","TargetB", "StaticA", "StaticB", "Crosses", "ClickA","ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red","black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA", "TargetB", "StaticA", "StaticB", "Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan", "green", "blue", "blue", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.2,                      # size of shapes#
col = "black")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.2, col = "black")#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "cyan", "green", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.2,                      # size of shapes#
col = "black")                   # color of shapes#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.2, col = "black")#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "cyan", "green", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "black")                   # color of shapes#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.3, col = "black")#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "cyan", "green", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.5,                      # size of shapes#
col = "black")                   # color of shapes#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "cyan", "green", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Plot Time versus Avatar A#
plot(x = x$Time, y = x$AvatarA,#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "cyan",                                                  # color#
main = "Experiment Results",                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                        # labeling axes#
#
# Plot Time versus Avatar B#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
points(x = x$Time, y = statA,   # variables#
cex = 0.3,                      # size of shapes#
col = "blue")                   # color of shapes#
#
# Plot static A object#
points(x = x$Time, y = statB, cex = 0.3, col = "blue")#
#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("TargetA", "TargetB", "StaticA", "StaticB", "Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("cyan","green", "blue", "blue", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "cyan", "green", "red", "black", "magenta", "red"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "TargetA", "TargetB","Crosses", "ClickA", "ClickB", "Boundaries"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "Boundaries", "TargetA", "TargetB","Crosses", "ClickA", "ClickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 16, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "Boundaries", "TargetA", "TargetB","Crosses", "ClickA", "ClickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,13,16,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-50)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 18, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "Boundaries", "TargetA", "TargetB","Crosses", "ClickA", "ClickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,13,18,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-80)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 18, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "Boundaries", "TargetA", "TargetB","Crosses", "ClickA", "ClickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,13,18,18)) # different shapes
# Rscript to display data extracted in the experiment#
#
# Read csv file#
x = csv.data <- read.csv("new1.csv")#
#
# Check the head of file#
head(x)#
#
# Show the data in the first column#
x$AvatarA#
x$Time#
#
# Width variable#
width = 1440.#
#
# StaticA position#
statA_pos = width/4.#
#
# StaticB position#
statB_pos = 3.*width/4.#
#
# Length of data vectors#
length(x$Time)#
#
# Stats position vector#
statA = statA_pos*rep(1,length(x$Time))#
statB = statB_pos*rep(1,length(x$Time))#
#
# Plot static A object#
plot(x = x$Time, y = statA,       # variables#
xlim = c(82*0.04,(length(x$Time)-80)*0.04), cex = 0.5, ylim = c(85,2240),       # ranges for axes#
col = "black",                                                                   # color#
main = "Experiment Results",                                                    # figure title#
xlab = "Time (s)", ylab="Postion (pix)")                                        # labeling axes#
)#
#
# Plot static B object#
points(x = x$Time, y = statB, cex = 0.5, col = "black")#
#
# plot boundaries of search space#
rlimit = width * rep(1,length(x$Time))#
llimit = 1 * rep(1,length(x$Time))#
points(x = x$Time, y = rlimit, cex = 0.3, col = "red")#
points(x = x$Time, y = llimit, cex = 0.3, col = "red")#
#
# Plot Time versus Avatar A position#
points(x = x$Time, y = x$AvatarA,       # variables#
cex = 0.5,                          # size of shapes#
col = "cyan")                      # color of shapes#
#
# Plot Time versus Avatar B position#
points(x = x$Time, y = x$AvatarB, cex = 0.5, col = "green")#
# n-Crosses#
x$nCrosses#
#
# In the x$clickA it is necessary to know when the value increase to know in whhich moment both targets cross.#
foo = seq(1,length(x$Time))   # sequence from 1 to 100 in steps of 2#
foo.diff = NULL#
for (i in 1:length(x$Time) ) {#
    foo.diff[i] = x$nCrosses[i]-x$nCrosses[i+1]#
}#
#
# Or instead, you can compute diff(x,1)#
## Default S3 method:#
dnCrosses=diff(x$nCrosses, 1)#
#
# Example in one position#
dnCrosses!=0#
x$Time[1474]#
#
# All the positions in time to plot with AvatarA position#
ind_Cros = x$Time[dnCrosses!=0]/0.04                                # 0.04 is the time interval between frames#
#
# Plot crosses when the system gives feedback#
points(x = x$Time[ind_Cros],y=x$AvatarA[ind_Cros], pch = 13,cex = 0.8, col = "red")#
#
## Now the clicks for avatarA#
x$clickA#
x$clickB#
#
# In this case we have ones in the instant that user A clicks so we should need compare that#
ind_clA = x$Time[x$clickA!=0]/0.04#
ind_clB = x$Time[x$clickB!=0]/0.04#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clA], y = x$AvatarA[ind_clA], cex = 0.7, pch = 18, col = "black")#
#
# plot clicks from avatarA#
points(x = x$Time[ind_clB], y = x$AvatarB[ind_clB], cex = 0.7, pch = 18, col = "magenta")#
#
# Legend#
legend(65,2300, # places a legend at the appropriate place#
c("StaticA", "StaticB", "Boundaries", "TargetA", "TargetB","Crosses", "ClickA", "ClickB"), # puts text in the legend#
#lty = c(1,1,1,1,1,1,1), # gives the legend appropriate symbols (lines)#
#lwd = c(2.5,2.5),        # line width#
col = c("black", "black", "red", "cyan", "green", "red", "black", "magenta"), # gives the legend lines the correct color and width#
pch = c(1,1,1,1,1,13,18,18)) # different shapes
